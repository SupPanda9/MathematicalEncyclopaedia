import gsap from "https://esm.sh/gsap@3.12.2";
import ScrollTrigger from "https://esm.sh/gsap@3.12.2/ScrollTrigger";
import * as THREE from "three";
import { GLTFLoader } from "three/addons/loaders/GLTFLoader";

gsap.registerPlugin(ScrollTrigger);

// Text to speech
document.querySelectorAll(".text-box").forEach((box) => {
  // –î–æ–±–∞–≤—è–º–µ –±—É—Ç–æ–Ω–∞
  const btn = document.createElement("button");
  btn.className = "tts-button";
  btn.innerHTML = "üîä";
  box.appendChild(btn);

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª–µ–Ω –∑–≤—É–∫
  const audioSrc = box.dataset.audio;
  let audio;

  if (audioSrc) {
    audio = new Audio(audioSrc);
  }

  btn.addEventListener("click", () => {
    // –ê–∫–æ –∏–º–∞ –∑–∞–ø–∏—Å ‚Äì –ø–æ–ª–∑–≤–∞–º–µ –Ω–µ–≥–æ
    if (audio) {
      if (!audio.paused) {
        audio.pause();
        audio.currentTime = 0;
      } else {
        audio.play();
      }
      return;
    }

    // –ò–Ω–∞—á–µ –ø–æ–ª–∑–≤–∞–º–µ TTS
    const clonedBox = box.cloneNode(true);
    clonedBox.querySelector(".tts-button")?.remove();
    const text = clonedBox.textContent.trim();

    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = "bg-BG";

    if (speechSynthesis.speaking) {
      speechSynthesis.cancel();
    } else {
      speechSynthesis.speak(utterance);
    }
  });
});

document.querySelectorAll(".flip-card").forEach((card) => {
  card.addEventListener("click", () => {
    card.classList.toggle("flipped");
  });

  card.querySelectorAll("*").forEach((child) => {
    child.style.pointerEvents = "none";
  });
});

/* Scene 1 */

const scene1Timeline = gsap.timeline({
  scrollTrigger: {
    trigger: ".scene-1",
    start: "top top",
    end: "+=300%",
    scrub: true,
    pin: true,
    anticipatePin: 1,
  },
});

scene1Timeline
  .to(
    ".intro-message",
    { opacity: 1, y: 0, duration: 1, ease: "power2.out" },
    0
  )
  .to(".intro-message", { opacity: 0, duration: 1, ease: "power2.out" }, "+=1");

scene1Timeline
  .fromTo(
    ".text-box-1a",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(".text-box-1a", { autoAlpha: 0, duration: 1, ease: "power2.out" }, "+=1");

scene1Timeline.fromTo(
  ".background-1",
  { opacity: 0, y: 0 },
  { opacity: 1, y: 0, duration: 1, ease: "power2.out" }
);

scene1Timeline
  .fromTo(
    ".text-box-1b, .text-box-1c",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-1b, .text-box-1c",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene1Timeline.to(".background-1", {
  scale: 2,
  rotation: 20,
  duration: 3,
  ease: "power2.out",
});

scene1Timeline
  .fromTo(
    ".text-box-1d, .text-box-1e",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-1d, .text-box-1e",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene1Timeline.to(".background-1", {
  scale: 3,
  rotation: 50,
  autoAlpha: 0,
  duration: 1,
  ease: "power2.out",
});

/* Scene 2 */
const scene2Timeline = gsap.timeline({
  scrollTrigger: {
    trigger: ".scene-2",
    start: "top top",
    end: "+=300%",
    scrub: true,
    pin: true,
    anticipatePin: 1,
  },
});

scene2Timeline
  .fromTo(
    ".text-box-2a",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 0.1, ease: "power2.out" }
  )
  .to(".text-box-2a", { autoAlpha: 0, duration: 1, ease: "power2.out" }, "+=1");

scene2Timeline.fromTo(
  ".background-2",
  { opacity: 0 },
  { opacity: 1, duration: 1, ease: "power2.out" }
);

scene2Timeline
  .fromTo(
    ".did-you-know-2a, .text-box-2b, .text-box-2c",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".did-you-know-2a, .text-box-2b, .text-box-2c",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene2Timeline
  .fromTo(
    ".text-box-2d",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(".text-box-2d", { autoAlpha: 0, duration: 1, ease: "power2.out" }, "+=1");

scene2Timeline
  .fromTo(
    ".text-box-2e, .text-box-2f, #drake-calculator",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-2e, .text-box-2f, #drake-calculator",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

function calculateDrake() {
  const rStar = parseFloat(document.getElementById("rStar").value);
  const fp = parseFloat(document.getElementById("fp").value);
  const ne = parseFloat(document.getElementById("ne").value);
  const fl = parseFloat(document.getElementById("fl").value);
  const fi = parseFloat(document.getElementById("fi").value);
  const fc = parseFloat(document.getElementById("fc").value);
  const L = parseFloat(document.getElementById("L").value);

  if ([rStar, fp, ne, fl, fi, fc, L].some(isNaN)) {
    alert("–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∏ —á–∏—Å–ª–∞ –≤—ä–≤ –≤—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞!");
    return;
  }

  const N = rStar * fp * ne * fl * fi * fc * L;
  document.getElementById("drake-result").textContent = N.toFixed(2);
}

document.addEventListener("DOMContentLoaded", () => {
  document
    .getElementById("drake-calc-btn")
    .addEventListener("click", calculateDrake);
});

scene2Timeline
  .fromTo(
    ".text-box-2g, .text-box-2h, .figure-2.contact, .did-you-know-2b",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-2g, .text-box-2h, .figure-2.contact, .did-you-know-2b",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene2Timeline
  .fromTo(
    ".text-box-2i, .text-box-2j, .did-you-know-2c, .did-you-know-2d",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-2i, .text-box-2j, .did-you-know-2c, .did-you-know-2d",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene2Timeline.to(
  ".background-2",
  {
    autoAlpha: 0,
    duration: 1,
    ease: "power2.out",
  },
  "+=1"
);

/* Scene 3 */
const scene3Timeline = gsap.timeline({
  scrollTrigger: {
    trigger: ".scene-3",
    start: "top top",
    end: "+=300%",
    scrub: true,
    pin: true,
    anticipatePin: 1,
  },
});

scene3Timeline.fromTo(
  ".background-3",
  { autoAlpha: 0 },
  { autoAlpha: 1, duration: 0.1, ease: "power2.out" }
);

scene3Timeline
  .fromTo(
    ".text-box-3a, .figure-3.lotka, .figure-3.volterra",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-3a, .figure-3.lotka, .figure-3.volterra",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene3Timeline
  .fromTo(
    ".text-box-3b, .sim-wolves-rabbits",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-3b, .sim-wolves-rabbits",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=2"
  );

const canvas = document.getElementById("sim-wolves-rabbits-3");
const ctx = canvas.getContext("2d");

ctx.font = "30px Arial";

class Animal {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.vx = (Math.random() - 0.5) * 1.5;
    this.vy = (Math.random() - 0.5) * 1.5;
  }

  move() {
    this.x += this.vx;
    this.y += this.vy;

    if (this.x < 0 || this.x > canvas.width) this.vx *= -1;
    if (this.y < 0 || this.y > canvas.height) this.vy *= -1;
  }
}

class Prey extends Animal {
  constructor(x, y) {
    super(x, y);
    this.age = 0;
  }

  update() {
    this.move();
    this.age++;
  }

  draw() {
    ctx.font = "25px Arial";
    ctx.fillText("üê∞", this.x, this.y);
  }
}

class Predator extends Animal {
  constructor(x, y) {
    super(x, y);
    this.hunger = 0;
  }

  update(preys) {
    let nearest = null;
    let minDist = Infinity;
    for (const prey of preys) {
      const dx = prey.x - this.x;
      const dy = prey.y - this.y;
      const dist = Math.sqrt(dx * dx + dy * dy);
      if (dist < minDist) {
        minDist = dist;
        nearest = prey;
      }
    }

    if (nearest) {
      const dx = nearest.x - this.x;
      const dy = nearest.y - this.y;
      const len = Math.sqrt(dx * dx + dy * dy);
      this.vx = (dx / len) * 0.8;
      this.vy = (dy / len) * 0.8;

      if (minDist < 10 && Math.random() < 0.25) {
        const index = preys.indexOf(nearest);
        if (index > -1) preys.splice(index, 1);
        this.hunger = 0;
        return true;
      }
    }

    this.move();
    this.hunger++;
    return false;
  }

  draw() {
    ctx.font = "25px Arial";
    ctx.fillText("üê∫", this.x, this.y);
  }
}

// –ù–∞—á–∞–ª–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ –±–∞–ª–∞–Ω—Å
let NUM_PREY = 40;
let NUM_PREDATORS = 6;
let PREY_REPRODUCE_INTERVAL = 80;
let PREDATOR_HUNGER_LIMIT = 350;

let preys = [];
let predators = [];

function initSimulation() {
  preys = [];
  predators = [];

  for (let i = 0; i < NUM_PREY; i++) {
    preys.push(
      new Prey(Math.random() * canvas.width, Math.random() * canvas.height)
    );
  }

  for (let i = 0; i < NUM_PREDATORS; i++) {
    predators.push(
      new Predator(Math.random() * canvas.width, Math.random() * canvas.height)
    );
  }
}

const MAX_PREY = 500;

function update() {
  const newPreys = [];
  for (const prey of preys) {
    prey.update();
    if (
      preys.length + newPreys.length < MAX_PREY &&
      prey.age % PREY_REPRODUCE_INTERVAL === 0 &&
      Math.random() < 0.3
    ) {
      newPreys.push(new Prey(prey.x, prey.y));
    }
  }
  preys = preys.concat(newPreys);

  const newPredators = [];
  for (let i = predators.length - 1; i >= 0; i--) {
    const predator = predators[i];
    const ate = predator.update(preys);
    if (ate && Math.random() < 0.1) {
      newPredators.push(new Predator(predator.x, predator.y));
    }
    if (predator.hunger > PREDATOR_HUNGER_LIMIT) {
      predators.splice(i, 1);
    }
  }
  predators = predators.concat(newPredators);

  if (preys.length === 0 || predators.length === 0) {
    console.log("Extinction detected. Restarting simulation...");
    setTimeout(() => {
      initSimulation();
    }, 1000);
  }
}

function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  for (const prey of preys) prey.draw();
  for (const predator of predators) predator.draw();

  ctx.font = "16px Arial";
  ctx.fillStyle = "black";
  ctx.fillText(`–ó–∞–π—Ü–∏: ${preys.length}`, 10, 20);
  ctx.fillText(`–í—ä–ª—Ü–∏: ${predators.length}`, 10, 40);
}

function loop() {
  update();
  draw();
  requestAnimationFrame(loop);
}

initSimulation();
loop();

scene3Timeline
  .fromTo(
    ".text-box-3c, .sim-phase-portrait",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-3c, .sim-phase-portrait",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=2"
  );

const canvas3b = document.getElementById("sim-phase-portrait-3");
const ctx3b = canvas3b.getContext("2d");
const width = canvas3b.width;
const height = canvas3b.height;

let x, y;
let dt = 0.01; // –í—Ä–µ–º–µ–≤–∞ —Å—Ç—ä–ø–∫–∞ –∑–∞ —Å–∏–º—É–ª–∞—Ü–∏—è—Ç–∞

let alpha, beta, delta, gamma; // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞ –º–æ–¥–µ–ª–∞ –Ω–∞ –õ–æ—Ç–∫–∞-–í–æ–ª—Ç–µ—Ä–∞ —Å –ª–æ–≥–∏—Å—Ç–∏—á–µ–Ω —Ä–∞—Å—Ç–µ–∂
let K = 500; // –ö–∞–ø–∞—Ü–∏—Ç–µ—Ç –Ω–∞ —Å—Ä–µ–¥–∞—Ç–∞ –∑–∞ –∑–∞–π—Ü–∏—Ç–µ

const points = []; // –¢–æ—á–∫–∏ –∑–∞ —á–µ—Ä—Ç–∞–Ω–µ –Ω–∞ —Ñ–∞–∑–æ–≤–∏—è –ø–æ—Ä—Ç—Ä–µ—Ç
const historyLength = 2000; // –£–≤–µ–ª–∏—á–µ–Ω –±—Ä–æ–π —Ç–æ—á–∫–∏ –∑–∞ –ø–æ-–¥—ä–ª–≥–∞ –ø—ä—Ç–µ–∫–∞

// –ü—Ä–∞–≥–æ–≤–µ –∑–∞ –∏–∑–º–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ–ø—É–ª–∞—Ü–∏–∏—Ç–µ
const extinctionThreshold = 0.5; // –ê–∫–æ –ø–æ–ø—É–ª–∞—Ü–∏—è—Ç–∞ –ø–∞–¥–Ω–µ –ø–æ–¥ —Ç–æ–≤–∞ —á–∏—Å–ª–æ, —Ç—è –∏–∑–º–∏—Ä–∞ –Ω–∞–ø—ä–ª–Ω–æ

function initScenario(scenario) {
  points.length = 0; // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –ø—Ä–µ–¥–∏—à–Ω–∏ —Ç–æ—á–∫–∏
  // Resetting current x, y values to avoid issues from previous runs
  // These initial values can be crucial for the trajectory
  switch (scenario) {
    case 1: // –í—ä–ª—Ü–∏—Ç–µ —É–º–∏—Ä–∞—Ç, –ó–∞–π—Ü–∏—Ç–µ —Å–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–∞—Ç –¥–æ K (500)
      x = 500;
      y = 330;
      alpha = 0.5; // –°—Ä–∞–≤–Ω–∏—Ç–µ–ª–Ω–æ –≤–∏—Å–æ–∫ —Ä–∞—Å—Ç–µ–∂ –Ω–∞ –∑–∞–π—Ü–∏—Ç–µ
      beta = 0.01; // –ú–Ω–æ–≥–æ –Ω–∏—Å–∫–∞ –∫–æ–Ω—Å—É–º–∞—Ü–∏—è –Ω–∞ –∑–∞–π—Ü–∏ –æ—Ç –≤—ä–ª—Ü–∏ (–Ω–∞–º–∞–ª–µ–Ω–∞ –æ—â–µ –º–∞–ª–∫–æ)
      delta = 0.001; // –ò–∑–∫–ª—é—á–∏—Ç–µ–ª–Ω–æ –Ω–∏—Å–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–∞–≤–∞–Ω–µ –Ω–∞ –≤—ä–ª—Ü–∏—Ç–µ (–Ω–∞–º–∞–ª–µ–Ω–∞ –æ—â–µ)
      gamma = 0.5; // –í–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞ —Å–º—ä—Ä—Ç–Ω–æ—Å—Ç –ø—Ä–∏ –≤—ä–ª—Ü–∏—Ç–µ
      // –¢–µ–∑–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç—Ä—è–±–≤–∞ –¥–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–∞—Ç –∏–∑–º–∏—Ä–∞–Ω–µ –Ω–∞ –≤—ä–ª—Ü–∏—Ç–µ
      // –∏ –ø–æ—Å–ª–µ–¥–≤–∞—â –ª–æ–≥–∏—Å—Ç–∏—á–µ–Ω —Ä–∞—Å—Ç–µ–∂ –Ω–∞ –∑–∞–π—Ü–∏—Ç–µ –¥–æ K.
      break;

    case 2: // –ó–∞–π—Ü–∏—Ç–µ –∏ –≤—ä–ª—Ü–∏—Ç–µ —É–º–∏—Ä–∞—Ç
      x = 500; // –°—Ä–µ–¥–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–π—Ü–∏
      y = 200; // –ú–Ω–æ–≥–æ –≤—ä–ª—Ü–∏
      alpha = 0.2; // –ù–∏—Å—ä–∫ —Ä–∞—Å—Ç–µ–∂ –Ω–∞ –∑–∞–π—Ü–∏—Ç–µ
      beta = 0.03; // –í–∏—Å–æ–∫–∞ –∫–æ–Ω—Å—É–º–∞—Ü–∏—è –Ω–∞ –∑–∞–π—Ü–∏
      delta = 0.01; // –ù–æ—Ä–º–∞–ª–Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–∞–≤–∞–Ω–µ –Ω–∞ –≤—ä–ª—Ü–∏—Ç–µ
      gamma = 0.3; // –ù–æ—Ä–º–∞–ª–Ω–∞ —Å–º—ä—Ä—Ç–Ω–æ—Å—Ç –Ω–∞ –≤—ä–ª—Ü–∏—Ç–µ
      // –¢–æ–∑–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π —Ç—Ä—è–±–≤–∞ –¥–∞ –¥–æ–≤–µ–¥–µ –¥–æ –∏–∑–º–∏—Ä–∞–Ω–µ –Ω–∞ –∑–∞–π—Ü–∏—Ç–µ,
      // –ø–æ—Å–ª–µ–¥–≤–∞–Ω–æ –æ—Ç –∏–∑–º–∏—Ä–∞–Ω–µ –Ω–∞ –≤—ä–ª—Ü–∏—Ç–µ –ø–æ—Ä–∞–¥–∏ –ª–∏–ø—Å–∞ –Ω–∞ —Ö—Ä–∞–Ω–∞.
      break;

    case 3: // –ë–∞–ª–∞–Ω—Å–∏—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π —Å —Ñ–ª—É–∫—Ç—É–∞—Ü–∏–∏ –æ–∫–æ–ª–æ x=300, y=80
      x = 300; // –ù–∞—á–∞–ª–µ–Ω –±—Ä–æ–π –∑–∞–π—Ü–∏ (–º–æ–∂–µ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—Ç–µ –∏ –º–∞–ª–∫–æ –ø–æ-–¥–∞–ª–µ—á –æ—Ç —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ—Ç–æ, –Ω–∞–ø—Ä. 350)
      y = 80; // –ù–∞—á–∞–ª–µ–Ω –±—Ä–æ–π –≤—ä–ª—Ü–∏ (–º–æ–∂–µ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—Ç–µ –∏ –º–∞–ª–∫–æ –ø–æ-–¥–∞–ª–µ—á –æ—Ç —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ—Ç–æ, –Ω–∞–ø—Ä. 70)
      K = 500; // –ö–∞–ø–∞—Ü–∏—Ç–µ—Ç –Ω–∞ —Å—Ä–µ–¥–∞—Ç–∞

      // –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∏—Ç–µ alpha, beta, delta, gamma
      // x_E = gamma / delta  => delta = gamma / x_E
      // y_E = alpha / beta * (1 - x_E / K) => alpha = beta * y_E / (1 - x_E / K)

      // –ù–µ–∫–∞ —Ñ–∏–∫—Å–∏—Ä–∞–º–µ –Ω—è–∫–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, –∫–æ–∏—Ç–æ –∏–∑–≥–ª–µ–∂–¥–∞—Ç —Ä–∞–∑—É–º–Ω–∏:
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–∞ –∑–∞–ø–∞–∑–∏–º delta –∏ beta –≤ –ø–æ–¥–æ–±–Ω–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∏ –∫–∞—Ç–æ –ø—Ä–µ–¥–∏—à–Ω–∏—Ç–µ –≤–∏.

      // –ò–∑–±–∏—Ä–∞–º–µ gamma –∏ beta
      gamma = 0.4; // –°—Ä–µ–¥–Ω–∞ —Å–º—ä—Ä—Ç–Ω–æ—Å—Ç –Ω–∞ –≤—ä–ª—Ü–∏—Ç–µ (–∫–∞–∫—Ç–æ –≤—ä–≤ –≤–∞—à–∏—è –ø—Ä–∏–º–µ—Ä)
      beta = 0.015; // –ú–∞–ª–∫–æ –ø–æ-–≥–æ–ª—è–º–∞ –∫–æ–Ω—Å—É–º–∞—Ü–∏—è –æ—Ç –ø—Ä–µ–¥–∏—à–Ω–∏—è –≤–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–∞–Ω (0.01)

      // –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ delta, –∑–∞ –¥–∞ –ø–æ–ª—É—á–∏–º x_E = 300
      delta = gamma / 300; // 0.4 / 300 = 0.001333...

      // –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ alpha, –∑–∞ –¥–∞ –ø–æ–ª—É—á–∏–º y_E = 80
      alpha = (beta * 80) / (1 - 300 / K);
      alpha = (beta * 80) / (1 - 300 / 500);
      alpha = (beta * 80) / (1 - 0.6);
      alpha = (beta * 80) / 0.4;
      alpha = beta * 200; // 0.015 * 200 = 3

      // –ö—Ä–∞–π–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ —Ç–æ–∑–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π:
      alpha = 3; // –í–∏—Å–æ–∫ —Ä–∞—Å—Ç–µ–∂ –Ω–∞ –∑–∞–π—Ü–∏—Ç–µ, –∑–∞ –¥–∞ –ø–æ–¥–¥—ä—Ä–∂–∞ –≥–æ–ª—è–º–∞ –ø–æ–ø—É–ª–∞—Ü–∏—è
      beta = 0.015; // –°—Ä–µ–¥–Ω–∞ –∫–æ–Ω—Å—É–º–∞—Ü–∏—è
      delta = 0.00133; // –ú–Ω–æ–≥–æ –Ω–∏—Å–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–∞–≤–∞–Ω–µ –Ω–∞ –≤—ä–ª—Ü–∏—Ç–µ
      gamma = 0.4; // –°—Ä–µ–¥–Ω–∞ —Å–º—ä—Ä—Ç–Ω–æ—Å—Ç –Ω–∞ –≤—ä–ª—Ü–∏—Ç–µ

      // –ó–∞ –¥–∞ –ø—Ä–µ–¥–∏–∑–≤–∏–∫–∞–º–µ —Ñ–ª—É–∫—Ç—É–∞—Ü–∏–∏, –Ω–∞—á–∞–ª–Ω–∏—Ç–µ x –∏ y –º–æ–∂–µ –¥–∞ –Ω–µ —Å–∞ —Ç–æ—á–Ω–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω–∏—Ç–µ —Ç–æ—á–∫–∏.
      // –ó–∞–ø–æ—á–≤–∞–Ω–µ –º–∞–ª–∫–æ –≤—Å—Ç—Ä–∞–Ω–∏ –æ—Ç —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ—Ç–æ —â–µ –∏–Ω–∏—Ü–∏–∏—Ä–∞ —Ü–∏–∫—ä–ª–∞.
      x = 400; // –ó–∞–ø–æ—á–≤–∞–º–µ —Å –ø–æ–≤–µ—á–µ –∑–∞–π—Ü–∏
      y = 300; // –ó–∞–ø–æ—á–≤–∞–º–µ —Å –ø–æ-–º–∞–ª–∫–æ –≤—ä–ª—Ü–∏

      break;
  }
}

function updateModel(scenario) {
  // –°–∏–º—É–ª–∏—Ä–∞–º–µ –Ω—è–∫–æ–ª–∫–æ —Å—Ç—ä–ø–∫–∏ –≤—ä–≤ –≤—Ä–µ–º–µ—Ç–æ –∑–∞ –ø–æ-–≥–ª–∞–¥–∫–æ –¥–≤–∏–∂–µ–Ω–∏–µ
  for (let i = 0; i < 20; i++) {
    // –£–≤–µ–ª–∏—á–∏—Ö –±—Ä–æ—è –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏—Ç–µ –Ω–∞ –∫–∞–¥—ä—Ä –∑–∞ –ø–æ-–±—ä—Ä–∑–∞ —Å–∏–º—É–ª–∞—Ü–∏—è
    let dx, dy;

    // –ú–æ–¥–µ–ª –Ω–∞ –õ–æ—Ç–∫–∞-–í–æ–ª—Ç–µ—Ä–∞ —Å –ª–æ–≥–∏—Å—Ç–∏—á–µ–Ω —Ä–∞—Å—Ç–µ–∂ –∑–∞ –ø–ª—è—á–∫–∞—Ç–∞
    dx = alpha * x * (1 - x / K) - beta * x * y;
    dy = delta * x * y - gamma * y;

    x += dx * dt;
    y += dy * dt;

    // **–ù–æ–≤–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ –∏–∑–º–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ–ø—É–ª–∞—Ü–∏–∏—Ç–µ:**
    // –ê–∫–æ –±—Ä–æ—è—Ç –Ω–∞ –∑–∞–π—Ü–∏—Ç–µ –ø–∞–¥–Ω–µ –ø–æ–¥ –ø—Ä–∞–≥–∞, —Ç–µ –∏–∑—á–µ–∑–≤–∞—Ç –Ω–∞–ø—ä–ª–Ω–æ.
    if (x < extinctionThreshold) {
      x = 0;
      // –ê–∫–æ –∑–∞–π—Ü–∏—Ç–µ –∏–∑–º—Ä–∞—Ç, –≤—ä–ª—Ü–∏—Ç–µ –Ω—è–º–∞ –¥–∞ –∏–º–∞—Ç —Ö—Ä–∞–Ω–∞ –∏ —â–µ —É–º—Ä–∞—Ç.
      // –ú–æ–∂–µ–º –¥–∞ —É—Å–∫–æ—Ä–∏–º –∏–∑–º–∏—Ä–∞–Ω–µ—Ç–æ –∏–º, –∞–∫–æ –∏—Å–∫–∞–º–µ.
      if (scenario === 2) {
        // –°–∞–º–æ –∑–∞ —Å—Ü–µ–Ω–∞—Ä–∏–π 2, –∫—ä–¥–µ—Ç–æ –∏—Å–∫–∞–º–µ –¥–∞ –∏–∑–º—Ä–∞—Ç –∏ –¥–≤–∞—Ç–∞ –≤–∏–¥–∞
        dy = -gamma * y; // –í—ä–ª—Ü–∏—Ç–µ —É–º–∏—Ä–∞—Ç —Å–∞–º–æ –æ—Ç –≥–ª–∞–¥
      } else {
        // –ó–∞ –æ—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏, –∞–∫–æ –∏–∑–º—Ä–∞—Ç –∑–∞–π—Ü–∏—Ç–µ, –≤—ä–ª—Ü–∏—Ç–µ —Å—ä—â–æ —É–º–∏—Ä–∞—Ç
        dy = -gamma * y;
      }
    }
    // –ê–∫–æ –±—Ä–æ—è—Ç –Ω–∞ –≤—ä–ª—Ü–∏—Ç–µ –ø–∞–¥–Ω–µ –ø–æ–¥ –ø—Ä–∞–≥–∞, —Ç–µ –∏–∑—á–µ–∑–≤–∞—Ç –Ω–∞–ø—ä–ª–Ω–æ.
    if (y < extinctionThreshold) {
      y = 0;
      // –ê–∫–æ –≤—ä–ª—Ü–∏—Ç–µ –∏–∑–º—Ä–∞—Ç, –∑–∞–π—Ü–∏—Ç–µ —â–µ —Ä–∞—Å—Ç–∞—Ç –¥–æ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞ K (–∞–∫–æ x < K).
      if (scenario === 1) {
        // –ó–∞ —Å—Ü–µ–Ω–∞—Ä–∏–π 1, –∫—ä–¥–µ—Ç–æ –≤—ä–ª—Ü–∏—Ç–µ –∏–∑–º–∏—Ä–∞—Ç
        dx = alpha * x * (1 - x / K); // –ó–∞–π—Ü–∏—Ç–µ —Ä–∞—Å—Ç–∞—Ç –±–µ–∑ —Ö–∏—â–Ω–∏—Ü–∏
      }
    }

    // –û–≥—Ä–∞–Ω–∏—á–∞–≤–∞–Ω–µ –Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏—Ç–µ, –∑–∞ –¥–∞ –Ω–µ —Å—Ç–∞–Ω–∞—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–Ω–∏
    if (x < 0) x = 0;
    if (y < 0) y = 0;

    // –û–≥—Ä–∞–Ω–∏—á–∞–≤–∞–Ω–µ –Ω–∞ –∑–∞–π—Ü–∏—Ç–µ –¥–æ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞ –Ω–∞ —Å—Ä–µ–¥–∞—Ç–∞ K
    if (x > K) x = K;

    // –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Ç–æ—á–∫–∞—Ç–∞ –∫—ä–º —Å–ø–∏—Å—ä–∫–∞
    points.push({ x, y });
    // –û–≥—Ä–∞–Ω–∏—á–∞–≤–∞–Ω–µ –Ω–∞ –¥—ä–ª–∂–∏–Ω–∞—Ç–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—è—Ç–∞ –Ω–∞ –ø—ä—Ç–µ–∫–∞—Ç–∞
    if (points.length > historyLength) {
      points.shift();
    }
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –∑–∞ –º–∞—â–∞–±–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏—Ç–µ –∑–∞ —á–µ—Ä—Ç–∞–Ω–µ –≤—ä—Ä—Ö—É canvas
function scaleX(val) {
  // –ú–∞—â–∞–±–∏—Ä–∞–º–µ x –ø–æ –æ—Å—Ç–∞ –Ω–∞ –∑–∞–π—Ü–∏—Ç–µ (–¥–æ K)
  return 50 + (val / K) * (width - 100);
}

function scaleY(val) {
  // –ú–∞—â–∞–±–∏—Ä–∞–º–µ y –ø–æ –æ—Å—Ç–∞ –Ω–∞ –≤—ä–ª—Ü–∏—Ç–µ (–¥–æ 500, –∫–æ–µ—Ç–æ –µ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –∑–∞ y)
  return height - 50 - (val / 500) * (height - 100);
}

// –§—É–Ω–∫—Ü–∏–∏ –∑–∞ —á–µ—Ä—Ç–∞–Ω–µ –Ω–∞ –º—Ä–µ–∂–∞—Ç–∞, –≤–µ–∫—Ç–æ—Ä–Ω–æ—Ç–æ –ø–æ–ª–µ –∏ —Ñ–∞–∑–æ–≤–∏—è –ø–æ—Ä—Ç—Ä–µ—Ç
function drawGrid() {
  const step = 50;
  ctx3b.strokeStyle = "#eee";
  ctx3b.lineWidth = 1;

  // –•–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–Ω–∏ –ª–∏–Ω–∏–∏ (x-–æ—Å)
  for (let i = 0; i <= K; i += 100) {
    const px = scaleX(i);
    ctx3b.beginPath();
    ctx3b.moveTo(px, 0);
    ctx3b.lineTo(px, height);
    ctx3b.stroke();
    ctx3b.fillStyle = "#555";
    ctx3b.fillText(i.toFixed(0), px - 10, height - 30);
  }

  // –í–µ—Ä—Ç–∏–∫–∞–ª–Ω–∏ –ª–∏–Ω–∏–∏ (y-–æ—Å)
  for (let i = 0; i <= 500; i += 100) {
    const py = scaleY(i);
    ctx3b.beginPath();
    ctx3b.moveTo(0, py);
    ctx3b.lineTo(width, py);
    ctx3b.stroke();
    ctx3b.fillStyle = "#555";
    ctx3b.fillText(i.toFixed(0), 10, py + 5);
  }
}

function drawVectorField() {
  const spacing = 30; // –†–∞–∑—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç—Ä–µ–ª–∫–∏—Ç–µ –Ω–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ—Ç–æ –ø–æ–ª–µ

  for (let sy = 50; sy <= height - 50; sy += spacing) {
    for (let sx = 50; sx <= width - 50; sx += spacing) {
      let xPop = ((sx - 50) / (width - 100)) * K; // –û–±—Ä–∞—Ç–Ω–æ –º–∞—â–∞–±–∏—Ä–∞–Ω–µ –∑–∞ x (–∑–∞–π—Ü–∏)
      let yPop = ((height - 50 - sy) / (height - 100)) * 500; // –û–±—Ä–∞—Ç–Ω–æ –º–∞—â–∞–±–∏—Ä–∞–Ω–µ –∑–∞ y (–≤—ä–ª—Ü–∏)

      // –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –ø–æ—Å–æ–∫–∞—Ç–∞ –Ω–∞ –≤–µ–∫—Ç–æ—Ä–∞
      let dx_vec = alpha * xPop * (1 - xPop / K) - beta * xPop * yPop;
      let dy_vec = delta * xPop * yPop - gamma * yPop;

      let len = Math.sqrt(dx_vec * dx_vec + dy_vec * dy_vec);
      if (len === 0) continue; // –ò–∑–±—è–≥–≤–∞–º–µ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω—É–ª–∞

      // –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –≤–µ–∫—Ç–æ—Ä–∞ –¥–æ –µ–¥–∏–Ω–∏—á–Ω–∞ –¥—ä–ª–∂–∏–Ω–∞
      dx_vec /= len;
      dy_vec /= len;

      const scale = 12; // –†–∞–∑–º–µ—Ä –Ω–∞ —Å—Ç—Ä–µ–ª–∫–∏—Ç–µ

      const x1 = sx;
      const y1 = sy;
      const x2 = x1 + dx_vec * scale;
      const y2 = y1 - dy_vec * scale; // –ú–∏–Ω—É—Å, –∑–∞—â–æ—Ç–æ Y-–æ—Å—Ç–∞ –Ω–∞ canvas-–∞ —Ä–∞—Å—Ç–µ –Ω–∞–¥–æ–ª—É

      ctx3b.strokeStyle = "rgba(0,0,0,0.5)"; // –¶–≤—è—Ç –Ω–∞ —Å—Ç—Ä–µ–ª–∫–∏—Ç–µ
      ctx3b.lineWidth = 1;
      ctx3b.beginPath();
      ctx3b.moveTo(x1, y1);
      ctx3b.lineTo(x2, y2);
      ctx3b.stroke();

      // –†–∏—Å—É–≤–∞–Ω–µ –Ω–∞ –≤—ä—Ä—Ö–∞ –Ω–∞ —Å—Ç—Ä–µ–ª–∫–∞—Ç–∞
      const angle = Math.atan2(y1 - y2, x2 - x1);
      ctx3b.beginPath();
      ctx3b.moveTo(x2, y2);
      ctx3b.lineTo(
        x2 - 7 * Math.cos(angle - 0, 3),
        y2 + 7 * Math.sin(angle - 0.3)
      );
      ctx3b.lineTo(
        x2 - 7 * Math.cos(angle + 0.3),
        y2 + 7 * Math.sin(angle + 0.3)
      );
      ctx3b.closePath();
      ctx3b.fillStyle = "rgba(0,0,0,0.5)";
      ctx3b.fill();
    }
  }
}

function draw3b() {
  ctx3b.clearRect(0, 0, width, height); // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ —Ü–µ–ª–∏—è canvas

  drawGrid(); // –ß–µ—Ä—Ç–∞–µ–º –º—Ä–µ–∂–∞—Ç–∞
  drawVectorField(); // –ß–µ—Ä—Ç–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ—Ç–æ –ø–æ–ª–µ

  // –ß–µ—Ä—Ç–∞–µ–º –æ—Å–∏—Ç–µ
  ctx3b.strokeStyle = "#ccc";
  ctx3b.lineWidth = 2;
  ctx3b.beginPath();
  ctx3b.moveTo(0, height - 50); // X-–æ—Å
  ctx3b.lineTo(width, height - 50);
  ctx3b.moveTo(50, 0); // Y-–æ—Å
  ctx3b.lineTo(50, height);
  ctx3b.stroke();

  // –ß–µ—Ä—Ç–∞–µ–º –ø—ä—Ç–µ–∫–∞—Ç–∞ –Ω–∞ —Å–∏–º—É–ª–∞—Ü–∏—è—Ç–∞
  ctx3b.beginPath();
  ctx3b.strokeStyle = "#2c3e50"; // –¶–≤—è—Ç –Ω–∞ –ø—ä—Ç–µ–∫–∞—Ç–∞
  ctx3b.lineWidth = 2;
  for (let i = 0; i < points.length; i++) {
    const px = scaleX(points[i].x);
    const py = scaleY(points[i].y);
    if (i === 0) ctx3b.moveTo(px, py); // –ó–∞–ø–æ—á–≤–∞–º–µ –ø—ä—Ç–µ–∫–∞—Ç–∞
    else ctx3b.lineTo(px, py); // –ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–º–µ –ø—ä—Ç–µ–∫–∞—Ç–∞
  }
  ctx3b.stroke();

  // –ß–µ—Ä—Ç–∞–µ–º —Ç–µ–∫—É—â–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è (—á–µ—Ä–≤–µ–Ω–∞ —Ç–æ—á–∫–∞)
  if (points.length > 0) {
    const latest = points[points.length - 1];
    ctx3b.beginPath();
    ctx3b.fillStyle = "red"; // –¶–≤—è—Ç –Ω–∞ —Ç–æ—á–∫–∞—Ç–∞
    ctx3b.arc(scaleX(latest.x), scaleY(latest.y), 5, 0, 2 * Math.PI); // –ö—Ä—ä–≥
    ctx3b.fill();
  }
}

// –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–µ–Ω —Ü–∏–∫—ä–ª
function loop3b() {
  updateModel(currentScenario); // –û–±–Ω–æ–≤—è–≤–∞–º–µ –º–æ–¥–µ–ª–∞
  draw3b(); // –ß–µ—Ä—Ç–∞–µ–º
  requestAnimationFrame(loop3b); // –ò–∑–≤–∏–∫–≤–∞–º–µ —Å–ª–µ–¥–≤–∞—â–∏—è –∫–∞–¥—ä—Ä
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å–∏–º—É–ª–∞—Ü–∏—è—Ç–∞
let currentScenario = 1;
initScenario(currentScenario);
loop3b();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∫–ª–∏–∫–≤–∞–Ω–∏—è—Ç–∞ –Ω–∞ –±—É—Ç–æ–Ω–∏—Ç–µ
document.getElementById("scenario1").onclick = () => {
  currentScenario = 1;
  initScenario(currentScenario);
};
document.getElementById("scenario2").onclick = () => {
  currentScenario = 2;
  initScenario(currentScenario);
};
document.getElementById("scenario3").onclick = () => {
  currentScenario = 3;
  initScenario(currentScenario);
};

scene3Timeline
  .fromTo(
    ".text-box-3d,.text-box-3e, .did-you-know-3a",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-3d, .text-box-3e, .did-you-know-3a",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=2"
  );

scene3Timeline
  .fromTo(
    ".text-box-3f,.text-box-3g, .text-box-3h",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-3f, .text-box-3g, .text-box-3h",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=2"
  );

scene3Timeline.to(
  ".background-3",
  { autoAlpha: 0, duration: 1, ease: "power2.out" },
  "+=1"
);

/* Scene 4 */
const scene4Timeline = gsap.timeline({
  scrollTrigger: {
    trigger: ".scene-4",
    start: "top top",
    end: "+=600%",
    scrub: true,
    pin: true,
    anticipatePin: 1,
  },
});

scene4Timeline
  .fromTo(
    ".text-box-4a",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )

  .to(".text-box-4a", { autoAlpha: 0, duration: 1 }, "+=1")

  .fromTo(
    ".background-4a",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )

  .fromTo(
    ".text-box-4b, .text-box-4c, .text-box-4d, .video-container-4a",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1 }
  )

  .to(
    ".text-box-4b, .text-box-4c, .text-box-4d, .video-container-4a",
    { autoAlpha: 0, duration: 1 },
    "+=1"
  )

  .to(
    ".background-4a",
    {
      autoAlpha: 0,
      duration: 1,
      ease: "power2.out",
    },
    "+=2"
  );

scene4Timeline.to(
  ".background-4b",
  {
    autoAlpha: 1,
    duration: 2,
    ease: "power2.out",
  },
  "<"
);

scene4Timeline
  .fromTo(
    ".figure-4.tarantula, .text-box-4e",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(".text-box-4e", { autoAlpha: 0, duration: 1, ease: "power2.out" }, "+=1")
  .to(".text-box-4f", { autoAlpha: 1, duration: 1, ease: "power2.out" })
  .to(".text-box-4f", { autoAlpha: 0, duration: 1, ease: "power2.out" }, "+=1")
  .to(".text-box-4g, .text-box-4h, .figure-4.spider-optical", {
    autoAlpha: 1,
    duration: 1,
    ease: "power2.out",
  })
  .to(
    ".text-box-4g, .text-box-4h, .figure-4.spider-optical, .figure-4.tarantula",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene4Timeline
  .to(
    ".background-4b",
    {
      autoAlpha: 0,
      duration: 2,
      ease: "power2.out",
    },
    "<"
  )
  .to(
    ".background-4c",
    {
      autoAlpha: 1,
      duration: 2,
      ease: "power2.out",
    },
    "<"
  );

scene4Timeline
  .fromTo(
    ".text-box-4i, .figure-4.turing",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-4i, .figure-4.turing",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene4Timeline
  .fromTo(
    ".text-box-4j, .text-box-4k, .figure-4.danio_rerio, .figure-4.leopard, .figure-4.zebra",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-4j, .text-box-4k, .figure-4.danio_rerio, .figure-4.leopard, .figure-4.zebra",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene4Timeline
  .fromTo(
    ".text-box-4l,.text-box-4l1, .sim-gray-scott",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-4l, .text-box-4l1, .sim-gray-scott",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

(() => {
  const canvas = document.getElementById("sim-gray-scott-4");
  const ctx = canvas.getContext("2d");
  const width = canvas.width;
  const height = canvas.height;

  // –†–∞–∑–º–µ—Ä –Ω–∞ –º—Ä–µ–∂–∞—Ç–∞ (–ø–æ-–º–∞–ª—ä–∫ –æ—Ç canvas –∑–∞ –ø–æ-–¥–æ–±—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç)
  const gridSize = 150;
  const scale = width / gridSize;

  // –ü–æ–ª–µ—Ç–∞ –Ω–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏—Ç–µ u –∏ v (2D –º–∞—Å–∏–≤–∏)
  let u = new Float32Array(gridSize * gridSize);
  let v = new Float32Array(gridSize * gridSize);
  let uNext = new Float32Array(gridSize * gridSize);
  let vNext = new Float32Array(gridSize * gridSize);

  // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ (—â–µ —Å–µ –≤–∑–µ–º–∞—Ç –æ—Ç –ø–ª—ä–∑–≥–∞—á–∏—Ç–µ)
  let D_u = 0.16;
  let D_v = 0.08;
  let F = 0.035;
  let k = 0.065;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –º–∞—Å–∏–≤–∏—Ç–µ
  function resetGrid() {
    for (let i = 0; i < gridSize * gridSize; i++) {
      u[i] = 1.0;
      v[i] = 0.0;
    }
    // –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª–µ–Ω —à—É–º
    for (let i = 0; i < gridSize * gridSize; i++) {
      if (Math.random() < 0.1) {
        // 10% —à–∞–Ω—Å –∑–∞ "—à—É–º"
        v[i] = Math.random(); // –ü—Ä–æ–∏–∑–≤–æ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É 0 –∏ 1
        u[i] = Math.random();
      }
    }
    // –ú–æ–∂–µ—Ç–µ –¥–∞ –∑–∞–ø–∞–∑–∏—Ç–µ –∏ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞—Ç–∞ –∫–∞–ø–∫–∞, –∞–∫–æ –∏—Å–∫–∞—Ç–µ
    const mid = Math.floor(gridSize / 2);
    for (let y = mid - 10; y < mid + 10; y++) {
      for (let x = mid - 10; x < mid + 10; x++) {
        const idx = y * gridSize + x;
        v[idx] = 0.25;
        u[idx] = 0.5;
      }
    }
  }

  // –õ–∞–ø–ª–∞—Å–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä (–∫—Ä–∞–µ–Ω –¥–∏—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª–µ–Ω)
  function laplace(arr, x, y) {
    const idx = y * gridSize + x;
    let sum = 0;
    sum += arr[idx] * -1;
    if (x > 0) sum += arr[y * gridSize + (x - 1)] * 0.2;
    if (x < gridSize - 1) sum += arr[y * gridSize + (x + 1)] * 0.2;
    if (y > 0) sum += arr[(y - 1) * gridSize + x] * 0.2;
    if (y < gridSize - 1) sum += arr[(y + 1) * gridSize + x] * 0.2;
    if (x > 0 && y > 0) sum += arr[(y - 1) * gridSize + (x - 1)] * 0.05;
    if (x > 0 && y < gridSize - 1)
      sum += arr[(y + 1) * gridSize + (x - 1)] * 0.05;
    if (x < gridSize - 1 && y > 0)
      sum += arr[(y - 1) * gridSize + (x + 1)] * 0.05;
    if (x < gridSize - 1 && y < gridSize - 1)
      sum += arr[(y + 1) * gridSize + (x + 1)] * 0.05;
    return sum;
  }

  // –°—Ç—ä–ø–∫–∞ –Ω–∞ —Å–∏–º—É–ª–∞—Ü–∏—è—Ç–∞
  function step() {
    for (let y = 1; y < gridSize - 1; y++) {
      for (let x = 1; x < gridSize - 1; x++) {
        const idx = y * gridSize + x;
        const uVal = u[idx];
        const vVal = v[idx];

        // –†–µ–∞–∫—Ü–∏—è –∏ –¥–∏—Ñ—É–∑–∏—è
        const lapU = laplace(u, x, y);
        const lapV = laplace(v, x, y);

        // Gray-Scott —É—Ä–∞–≤–Ω–µ–Ω–∏—è
        uNext[idx] = uVal + (D_u * lapU - uVal * vVal * vVal + F * (1 - uVal));
        vNext[idx] = vVal + (D_v * lapV + uVal * vVal * vVal - (F + k) * vVal);

        // Clamp 0..1
        uNext[idx] = Math.min(Math.max(uNext[idx], 0), 1);
        vNext[idx] = Math.min(Math.max(vNext[idx], 0), 1);
      }
    }

    // –°–º—è–Ω–∞ –Ω–∞ –º–∞—Å–∏–≤–∏—Ç–µ
    [u, uNext] = [uNext, u];
    [v, vNext] = [vNext, v];
  }

  // –†–∏—Å—É–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
  function draw() {
    const imgData = ctx.createImageData(gridSize, gridSize);
    for (let i = 0; i < gridSize * gridSize; i++) {
      // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ u –∏ v –∑–∞ —Ü–≤—è—Ç - –Ω–∞–ø—Ä–∏–º–µ—Ä u - v –¥–∞–≤–∞ —à–∞—Ä–∫–∞—Ç–∞
      const c = Math.floor((u[i] - v[i]) * 255);
      const color = Math.min(Math.max(c, 0), 255);

      imgData.data[i * 4 + 0] = color; // R
      imgData.data[i * 4 + 1] = color; // G
      imgData.data[i * 4 + 2] = color; // B
      imgData.data[i * 4 + 3] = 255; // Alpha
    }
    // –†–∞–∑—Ç—è–≥–∞–Ω–µ –¥–æ —Ü–µ–ª–∏—è canvas
    const offscreenCanvas = document.createElement("canvas");
    offscreenCanvas.width = gridSize;
    offscreenCanvas.height = gridSize;
    offscreenCanvas.getContext("2d").putImageData(imgData, 0, 0);

    ctx.imageSmoothingEnabled = false;
    ctx.clearRect(0, 0, width, height);
    ctx.drawImage(offscreenCanvas, 0, 0, width, height);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  resetGrid();

  // –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ "–≤—ä–ª–Ω–∞" –ø—Ä–∏ –∫–ª–∏–∫ –≤—ä—Ä—Ö—É –ø–ª–∞—Ç–Ω–æ—Ç–æ
  canvas.addEventListener("click", (e) => {
    const rect = canvas.getBoundingClientRect();
    const x = Math.floor((e.clientX - rect.left) / scale);
    const y = Math.floor((e.clientY - rect.top) / scale);
    const idx = y * gridSize + x;
    if (idx >= 0 && idx < gridSize * gridSize) {
      v[idx] = 0.8;
      u[idx] = 0.2;
    }
  });

  // –ì–ª–∞–≤–µ–Ω —Ü–∏–∫—ä–ª
  function animate() {
    for (let i = 0; i < 10; i++) {
      // –ø–æ-–±—ä—Ä–∑–∞ —Å–∏–º—É–ª–∞—Ü–∏—è
      step();
    }
    draw();
    requestAnimationFrame(animate);
  }
  animate();

  // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–∞–Ω–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
  function updateSliderValues() {
    document.getElementById("value-Du").textContent = parseFloat(
      sliderDu.value
    ).toFixed(3);
    document.getElementById("value-Dv").textContent = parseFloat(
      sliderDv.value
    ).toFixed(3);
    document.getElementById("value-F").textContent = parseFloat(
      sliderF.value
    ).toFixed(4);
    document.getElementById("value-k").textContent = parseFloat(
      sliderK.value
    ).toFixed(4);
  }

  // –°–≤—ä—Ä–∑–≤–∞–Ω–µ —Å oninput
  const sliderDu = document.getElementById("slider-Du");
  const sliderDv = document.getElementById("slider-Dv");
  const sliderF = document.getElementById("slider-F");
  const sliderK = document.getElementById("slider-k");

  sliderDu.oninput = () => {
    D_u = parseFloat(sliderDu.value);
    resetGrid();
    updateSliderValues();
  };
  sliderDv.oninput = () => {
    D_v = parseFloat(sliderDv.value);
    resetGrid();
    updateSliderValues();
  };
  sliderF.oninput = () => {
    F = parseFloat(sliderF.value);
    resetGrid();
    updateSliderValues();
  };
  sliderK.oninput = () => {
    k = parseFloat(sliderK.value);
    resetGrid();
    updateSliderValues();
  };

  // –ü—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ
  updateSliderValues();
})();

scene4Timeline
  .to(
    ".background-4c",
    {
      autoAlpha: 0,
      duration: 2,
      ease: "power2.out",
    },
    "<"
  )
  .to(
    ".background-4d",
    {
      autoAlpha: 1,
      duration: 2,
      ease: "power2.out",
    },
    "<"
  );

scene4Timeline
  .fromTo(
    ".text-box-4m, .text-box-4n, .figure-4.octopus",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-4m, .text-box-4n, .figure-4.octopus",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene4Timeline
  .fromTo(
    ".text-box-4o, .video-container-4b",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-4o, .video-container-4b",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene4Timeline
  .to(
    ".background-4d",
    {
      autoAlpha: 0,
      duration: 2,
      ease: "power2.out",
    },
    "<"
  )
  .to(
    ".background-4e",
    {
      autoAlpha: 1,
      duration: 2,
      ease: "power2.out",
    },
    "<"
  );

scene4Timeline
  .fromTo(
    ".text-box-4p, .text-box-4q",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-4p, .text-box-4q",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene4Timeline
  .fromTo(
    ".text-box-4r, .text-box-4s, .figure-4.aco",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-4r, .text-box-4s, .figure-4.aco",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene4Timeline
  .fromTo(
    ".text-box-4t, .text-box-4u",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-4t, .text-box-4u",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  )
  .to(".background-4e", { autoAlpha: 0, duration: 1, ease: "power2.out" });

/* Scene 5 */
const scene5Timeline = gsap.timeline({
  scrollTrigger: {
    trigger: ".scene-5",
    start: "top top",
    end: "+=400%",
    scrub: true,
    pin: true,
    anticipatePin: 1,
  },
});

scene5Timeline.fromTo(
  ".background-5",
  { autoAlpha: 0 },
  { autoAlpha: 1, duration: 0.5, ease: "power2.out" }
);

scene5Timeline
  .fromTo(
    ".text-box-5a",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(".text-box-5a", { autoAlpha: 0, duration: 1, ease: "power2.out" }, "+=1");

scene5Timeline
  .fromTo(
    ".text-box-5b, .text-box-5c, .sim-log-spiral",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-5b, .text-box-5c, .sim-log-spiral",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

window.addEventListener("DOMContentLoaded", () => {
  const canvas = document.getElementById("sim-log-spiral");
  const ctx = canvas.getContext("2d");

  const centerX = canvas.width / 2;
  const centerY = canvas.height / 2;

  const a = 2; // initial radius scale
  const b = 0.15; // growth rate

  let maxTheta = 0;
  const maxThetaLimit = 12 * Math.PI; // max angle for one full spiral drawing
  const delta = 0.05; // increment per frame

  function drawSpiral(thetaLimit) {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    ctx.beginPath();
    // Start at center
    const startX = centerX + a * Math.exp(b * 0) * Math.cos(0);
    const startY = centerY + a * Math.exp(b * 0) * Math.sin(0);
    ctx.moveTo(startX, startY);

    for (let t = 0; t < thetaLimit; t += 0.01) {
      const r = a * Math.exp(b * t);
      const x = centerX + r * Math.cos(t);
      const y = centerY + r * Math.sin(t);
      ctx.lineTo(x, y);
    }

    ctx.strokeStyle = "gold";
    ctx.lineWidth = 2;
    ctx.stroke();
  }

  function animate() {
    drawSpiral(maxTheta);

    maxTheta += delta;
    if (maxTheta > maxThetaLimit) {
      maxTheta = 0; // reset to start the spiral again
    }

    requestAnimationFrame(animate);
  }

  animate();
});

scene5Timeline
  .fromTo(
    ".text-box-5d, .figure-5.snail_shell, .figure-5.sunflower",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-5d, .figure-5.snail_shell, .figure-5.sunflower",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene5Timeline
  .fromTo(
    ".text-box-5e, .text-box-5f, .text-box-5g, .did-you-know-5a",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-5e, .text-box-5f, .text-box-5g, .did-you-know-5a",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene5Timeline
  .fromTo(
    ".text-box-5h, .sim-sierpinski",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-5h, .sim-sierpinski",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

window.addEventListener("DOMContentLoaded", () => {
  const canvas5b = document.getElementById("sim-sierpinski");
  const ctx5b = canvas5b.getContext("2d");

  // Handle high-DPI screens
  const dpr5b = window.devicePixelRatio || 1;
  const width5b = 400;
  const height5b = 400;

  canvas5b.width = width5b * dpr5b;
  canvas5b.height = height5b * dpr5b;
  canvas5b.style.width = width5b + "px";
  canvas5b.style.height = height5b + "px";
  ctx5b.scale(dpr5b, dpr5b);

  const p1_5b = { x: width5b / 2, y: 20 };
  const p2_5b = { x: 20, y: height5b - 20 };
  const p3_5b = { x: width5b - 20, y: height5b - 20 };

  function drawTriangle5b(a5b, b5b, c5b, color5b = "#0099ff") {
    ctx5b.beginPath();
    ctx5b.moveTo(a5b.x, a5b.y);
    ctx5b.lineTo(b5b.x, b5b.y);
    ctx5b.lineTo(c5b.x, c5b.y);
    ctx5b.closePath();
    ctx5b.fillStyle = color5b;
    ctx5b.fill();
  }

  function sierpinski5b(a5b, b5b, c5b, depth5b) {
    if (depth5b === 0) {
      drawTriangle5b(a5b, b5b, c5b);
      return;
    }

    const ab5b = midpoint5b(a5b, b5b);
    const bc5b = midpoint5b(b5b, c5b);
    const ca5b = midpoint5b(c5b, a5b);

    sierpinski5b(a5b, ab5b, ca5b, depth5b - 1);
    sierpinski5b(ab5b, b5b, bc5b, depth5b - 1);
    sierpinski5b(ca5b, bc5b, c5b, depth5b - 1);
  }

  function midpoint5b(p15b, p25b) {
    return {
      x: (p15b.x + p25b.x) / 2,
      y: (p15b.y + p25b.y) / 2,
    };
  }

  let currentDepth5b = 0;
  const maxDepth5b = 5;

  function animate5b() {
    ctx5b.clearRect(0, 0, width5b, height5b);
    sierpinski5b(p1_5b, p2_5b, p3_5b, currentDepth5b);

    currentDepth5b++;
    if (currentDepth5b > maxDepth5b) {
      currentDepth5b = 0;
    }

    setTimeout(animate5b, 1000); // every 1 second
  }

  animate5b();
});

scene5Timeline
  .fromTo(
    ".text-box-5i, .sim-koch",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-5i, .sim-koch",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

window.addEventListener("DOMContentLoaded", () => {
  const canvas5b = document.getElementById("sim-koch");
  const ctx5b = canvas5b.getContext("2d");

  const dpr5b = window.devicePixelRatio || 1;
  const width5b = 500;
  const height5b = 500;

  canvas5b.width = width5b * dpr5b;
  canvas5b.height = height5b * dpr5b;
  canvas5b.style.width = width5b + "px";
  canvas5b.style.height = height5b + "px";
  ctx5b.scale(dpr5b, dpr5b);

  function drawKochLine5b(p1_5b, p2_5b, depth5b) {
    if (depth5b === 0) {
      ctx5b.beginPath();
      ctx5b.moveTo(p1_5b.x, p1_5b.y);
      ctx5b.lineTo(p2_5b.x, p2_5b.y);
      ctx5b.stroke();
      return;
    }

    const dx5b = (p2_5b.x - p1_5b.x) / 3;
    const dy5b = (p2_5b.y - p1_5b.y) / 3;

    const pA_5b = { x: p1_5b.x + dx5b, y: p1_5b.y + dy5b };
    const pB_5b = { x: p1_5b.x + 2 * dx5b, y: p1_5b.y + 2 * dy5b };

    const angleRad5b = Math.PI / 3;
    const vx5b = pB_5b.x - pA_5b.x;
    const vy5b = pB_5b.y - pA_5b.y;

    const pC_5b = {
      x: pA_5b.x + Math.cos(angleRad5b) * vx5b - Math.sin(angleRad5b) * vy5b,
      y: pA_5b.y + Math.sin(angleRad5b) * vx5b + Math.cos(angleRad5b) * vy5b,
    };

    drawKochLine5b(p1_5b, pA_5b, depth5b - 1);
    drawKochLine5b(pA_5b, pC_5b, depth5b - 1);
    drawKochLine5b(pC_5b, pB_5b, depth5b - 1);
    drawKochLine5b(pB_5b, p2_5b, depth5b - 1);
  }

  let currentDepth5b = 0;
  const maxDepth5b = 5;

  function animateKoch5b() {
    ctx5b.clearRect(0, 0, width5b, height5b);
    ctx5b.strokeStyle = "#0066ff";
    ctx5b.lineWidth = 1;

    const size5b = 400;

    // –ì–µ–æ–º–µ—Ç—Ä–∏—è: –≤–∏—Å–æ—á–∏–Ω–∞ –Ω–∞ —Ä–∞–≤–Ω–æ—Å—Ç—Ä–∞–Ω–µ–Ω —Ç—Ä–∏—ä–≥—ä–ª–Ω–∏–∫
    const heightTriangle5b = (Math.sqrt(3) / 2) * size5b;

    // –¶–µ–Ω—Ç—Ä–∏—Ä–∞–Ω–µ —Å–ø—Ä—è–º–æ canvas
    const offsetX5b = (width5b - size5b) / 2;
    const offsetY5b = (height5b - heightTriangle5b - 133) / 2;

    const p1_5b = { x: offsetX5b, y: offsetY5b + heightTriangle5b };
    const p2_5b = { x: offsetX5b + size5b, y: offsetY5b + heightTriangle5b };
    const p3_5b = { x: offsetX5b + size5b / 2, y: offsetY5b };

    drawKochLine5b(p1_5b, p2_5b, currentDepth5b);
    drawKochLine5b(p2_5b, p3_5b, currentDepth5b);
    drawKochLine5b(p3_5b, p1_5b, currentDepth5b);

    currentDepth5b++;
    if (currentDepth5b > maxDepth5b) {
      currentDepth5b = 0;
    }

    setTimeout(animateKoch5b, 1000);
  }

  animateKoch5b();
});

scene5Timeline
  .fromTo(
    ".text-box-5j, .did-you-know-5b",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-5j, .did-you-know-5b",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene5Timeline
  .fromTo(
    ".text-box-5k, .figure-5.golden_ratio",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-5k, .figure-5.golden_ratio",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene5Timeline
  .fromTo(
    ".text-box-5l, .video-container-5a",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-5l, .video-container-5a",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene5Timeline
  .fromTo(
    ".text-box-5m, .figure-5.artichoke, .figure-5.pinecone, .figure-5.pineapple",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-5m, .figure-5.artichoke, .figure-5.pinecone, .figure-5.pineapple",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene5Timeline
  .fromTo(
    ".text-box-5n, .figure-5.vitruvian_man, .figure-5.parthenon",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-5n, .figure-5.vitruvian_man, .figure-5.parthenon",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );

scene5Timeline
  .fromTo(
    ".text-box-5o",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(".text-box-5o", { autoAlpha: 0, duration: 1, ease: "power2.out" }, "+=1");

scene5Timeline.to(".background-5", {
  autoAlpha: 0,
  duration: 0.5,
  ease: "power2.out",
});

/* Scene 6 */
const scene6Timeline = gsap.timeline({
  scrollTrigger: {
    trigger: ".scene-6",
    start: "top top",
    end: "+=400%",
    scrub: true,
    pin: true,
    anticipatePin: 1,
  },
});

scene6Timeline.fromTo(
  ".background-6",
  { autoAlpha: 0 },
  { autoAlpha: 1, duration: 1, ease: "power2.out" }
);

scene6Timeline
  .fromTo(
    ".text-box-6a, .text-box-6b, .text-box-6c",
    { autoAlpha: 0 },
    { autoAlpha: 1, duration: 1, ease: "power2.out" }
  )
  .to(
    ".text-box-6a, .text-box-6b, .text-box-6c",
    { autoAlpha: 0, duration: 1, ease: "power2.out" },
    "+=1"
  );
